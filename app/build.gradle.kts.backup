
import java.util.*

plugins {
    id("com.android.application")
    kotlin("android")
    kotlin("android.extensions")
    id("androidx.navigation.safeargs")
    id("kotlin-kapt")
    id("org.jetbrains.dokka-android")
    id("com.google.android.gms.oss-licenses-plugin")
}

// below: load the desired values from custom.properties in order to be injected into BuildConfig and Res
// the values in custom.properties must not contain quotes otherwise the parsed values here will contain quotes
val properties = Properties()
properties.load(project.rootProject.file("custom.properties").inputStream())
val buildPackage: String = properties.getProperty("packageName", "")
val signingKeyStorePath: String = properties.getProperty("signingKeyStorePath", "")
val signingKeyStorePassword: String = properties.getProperty("signingKeyStorePassword", "")
val signingKeyAlias: String = properties.getProperty("signingKeyAlias", "")
val signingKeyPassword: String = properties.getProperty("signingKeyPassword", "")

//dokka-android {
//    outputFormat = "html"
//    outputDirectory = "./kdoc"
//}

android {
    buildToolsVersion = "29.0.3"
    sourceSets {
        getByName("main").java.srcDir("src/main/kotlin")
    }
    signingConfigs {
        create("Sign4Release") {
            keyAlias = signingKeyAlias
            keyPassword = signingKeyPassword
            storeFile = file(signingKeyStorePath)
            storePassword = signingKeyStorePassword
        }
    }
    compileSdkVersion(29)
    defaultConfig {
        // below: manifest placeholders
        manifestPlaceholders = mapOf<String, String>("buildPackage" to buildPackage)
        applicationId = "com.madness.collision"
        minSdkVersion(22)
        targetSdkVersion(29)
        versionCode = 20042713
        versionName = "3.1.5"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId = "${applicationId}.test"
        renderscriptSupportModeEnabled = true
        signingConfig = signingConfigs.getByName("Sign4Release")
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
        // below: inject the desired values into BuildConfig and Res
        // the string values have to be wrapped in quotes because the value in local.properties does not have quotes
        buildConfigField("String", "BUILD_PACKAGE", "\"$buildPackage\"")
        resValue("string", "buildPackage", buildPackage)
        // below: fix multi-locale support
        resConfigs("en", "en-rGB", "en-rUS", "zh", "zh-rCN", "ru", "ru-rRU", "es", "es-rES", "es-rUS", "ar", "it", "it-rIT", "pt", "pt-rPT", "th", "th-rTH", "vi", "vi-rVN", "fr", "fr-rFR")
    }
    flavorDimensions("arch")
    productFlavors {
        create("full") {
            setDimension("arch")
        }
        create("arm") {
            setDimension("arch")
            ndk{
                abiFilters("armeabi-v7a", "arm64-v8a")
            }
        }
        create("x86") {
            setDimension("arch")
            ndk{
                abiFilters("x86", "x86_64")
            }
        }
    }
    buildTypes {
        getByName("debug") {
            applicationIdSuffix = ".mortal"
            isDebuggable = true
            isJniDebuggable = false
            signingConfig = signingConfigs.getByName("Sign4Release")
            isRenderscriptDebuggable = false
            renderscriptOptimLevel = 3
            isZipAlignEnabled = true
            isMinifyEnabled = true
            isShrinkResources = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
        getByName("release") {
            isDebuggable = false
            isJniDebuggable = false
            signingConfig = signingConfigs.getByName("Sign4Release")
            isRenderscriptDebuggable = false
            renderscriptOptimLevel = 3
            isZipAlignEnabled = true
            isMinifyEnabled = true
            isShrinkResources = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }
    lintOptions {
        isCheckReleaseBuilds = false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        isAbortOnError = false
    }
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()
    dataBinding.isEnabled = true
    viewBinding.isEnabled = true
    dynamicFeatures = [":cool_app", ":image_modifying", ":themed_wallpaper", ":school_timetable", ":no_media", ":api_viewing", ":audio_timer", ":we_chat_evo", ":qq_contacts"]
}


object Versions {
    val androidxTestCore = "1.2.0"
    val androidxTestRunner = "1.2.0"
    val androidxTestExtJunit = "1.1.1"
    val androidxTestEspresso = "3.2.0"

    val androidxAppcompat = "1.1.0"
    val androidxLifecycle = "2.2.0"
    val androidxRoom = "2.2.5"
    val androidxNavigation = "2.2.2"
    val androidxCoreTesing = "2.1.0"
    val androidxFragment = "1.2.3"
    val androidxDrawerLayout = "1.1.0-alpha04"
    val androidxSwipeRefreshLayout = "1.0.0"
    val androidxConstraintLayout = "2.0.0-beta4"
    val androidxPalette = "1.0.0"
    val androidxCardView = "1.0.0"
    val androidxRecyclerView = "1.1.0"
    val androidxHeifWriter = "1.0.0"
    val androidxDataBinding = "3.5.2"
    val androidxViewPager = "1.0.0"
    val androidxPaging = "2.1.2"
    val androidxPreference = "1.1.1"
    val androidxWork = "2.0.1"

    val googleTruth = "1.0"
    val googleMaterialTheme = "1.1.0"
    val googlePlayServicesOSSLicenses = "17.0.0"
    val glide = "4.9.0"
    val jsoup = "1.12.1"
    val junitJupiter = "5.5.2"
    val kotlin = "1.3.72"
    val kotlinCoroutines = "1.3.0"
}

object Dependencies {
    // gradle plugins
    val kotlinGradlePlugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.kotlin}"
    val kotlinAndroidExtensions = "org.jetbrains.kotlin:kotlin-android-extensions:${Versions.kotlin}"

    val androidxTestCore = "androidx.test:core:${Versions.androidxTestCore}"
    val androidxTestRunner = "androidx.test:runner:${Versions.androidxTestRunner}"
    val androidxTestExtJunit = "androidx.test.ext:junit:${Versions.androidxTestExtJunit}"
    val androidxTestEspresso = "androidx.test.espresso:espresso-core:${Versions.androidxTestEspresso}"

    val androidxAppcompat = "androidx.appcompat:appcompat:${Versions.androidxAppcompat}"
    val androidxFragment = "androidx.fragment:fragment-ktx:${Versions.androidxFragment}"
    val androidxDrawerLayout = "androidx.drawerlayout:drawerlayout:${Versions.androidxDrawerLayout}"
    val androidxSwipeRefreshLayout = "androidx.swiperefreshlayout:swiperefreshlayout:${Versions.androidxSwipeRefreshLayout}"
    val androidxConstraintLayout = "androidx.constraintlayout:constraintlayout:${Versions.androidxConstraintLayout}"
    val androidxPalette = "androidx.palette:palette:${Versions.androidxPalette}"
    val androidxCardView = "androidx.cardview:cardview:${Versions.androidxCardView}"
    val androidxRecyclerView = "androidx.recyclerview:recyclerview:${Versions.androidxRecyclerView}"
    val androidxHeifWriter = "androidx.heifwriter:heifwriter:${Versions.androidxHeifWriter}"
    val androidxDataBinding = "androidx.databinding:databinding-adapters:${Versions.androidxDataBinding}"
    val androidxViewPager = "androidx.viewpager2:viewpager2:${Versions.androidxViewPager}"

    val androidxLifecycleCommon = "androidx.lifecycle:lifecycle-common-java8:${Versions.androidxLifecycle}"
    val androidxLifecycleViewModel = "androidx.lifecycle:lifecycle-viewmodel-ktx:${Versions.androidxLifecycle}"
    val androidxLifecycleLiveData = "androidx.lifecycle:lifecycle-livedata-ktx:${Versions.androidxLifecycle}"
    val androidxCoreTesing = "androidx.arch.core:core-testing:${Versions.androidxCoreTesing}"
    val androidxRoomRuntime = "androidx.room:room-runtime:${Versions.androidxRoom}"
    val androidxRoomCompiler = "androidx.room:room-compiler:${Versions.androidxRoom}"
    val androidxRoom = "androidx.room:room-ktx:${Versions.androidxRoom}"
    val androidxRoomTesing = "androidx.room:room-testing:${Versions.androidxRoom}"
    val androidxPaging = "androidx.paging:paging-runtime-ktx:${Versions.androidxPaging}"
    val androidxPreference = "androidx.preference:preference-ktx:${Versions.androidxPreference}"
    val androidxNavigationFragment = "androidx.navigation:navigation-fragment-ktx:${Versions.androidxNavigation}"
    val androidxNavigationUI = "androidx.navigation:navigation-ui-ktx:${Versions.androidxNavigation}"
    val androidxNavigationTesting = "androidx.navigation:navigation-testing:${Versions.androidxNavigation}"

    val androidxWorkRuntime = "androidx.work:work-runtime-ktx:${Versions.androidxWork}"
    val androidxWorkTesting = "androidx.work:work-testing:${Versions.androidxWork}"
    // optional - Firebase JobDispatcher support
    val androidxWorkFirebase = "androidx.work:work-firebase:${Versions.androidxWork}"

    val googleMaterialTheme = "com.google.android.material:material:${Versions.googleMaterialTheme}"
    val googlePlayServicesOSSLicenses = "com.google.android.gms:play-services-oss-licenses:${Versions.googlePlayServicesOSSLicenses}"
    val glide = "com.github.bumptech.glide:glide:${Versions.glide}"
    val jsoup = "org.jsoup:jsoup:${Versions.jsoup}"
    val kotlinStdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Versions.kotlin}"
    val kotlinReflect = "org.jetbrains.kotlin:kotlin-reflect:${Versions.kotlin}"

    val googleTruth = "com.google.truth:truth:${Versions.googleTruth}"
    val googleTruthExtensions = "com.google.truth.extensions:truth-java8-extension:${Versions.googleTruth}"
    val junitJupiter = "org.junit.jupiter:junit-jupiter-api:${Versions.junitJupiter}"
    val kotlinCoroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-android:${Versions.kotlinCoroutines}"
}

dependencies {

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation("com.google.android.play:core:1.7.2")
    listOf(
            fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))),
//            Dependencies.androidxWorkRuntime,
//            Dependencies.androidxWorkFirebase,
"androidx.core:core:1.2.0",
"androidx.core:core-ktx:1.2.0",
            Dependencies.androidxAppcompat,
            Dependencies.androidxFragment,
            Dependencies.androidxDrawerLayout,
            Dependencies.androidxSwipeRefreshLayout,
            Dependencies.androidxConstraintLayout,
            Dependencies.androidxPalette,
            Dependencies.androidxCardView,
            Dependencies.androidxRecyclerView,
            Dependencies.androidxViewPager,
            Dependencies.androidxLifecycleCommon,
            Dependencies.androidxLifecycleViewModel,
            Dependencies.androidxLifecycleLiveData,
            Dependencies.androidxPaging,
            Dependencies.androidxPreference,
            Dependencies.androidxNavigationFragment,
            Dependencies.androidxNavigationUI,
            Dependencies.googleMaterialTheme,
            Dependencies.googlePlayServicesOSSLicenses,
            Dependencies.jsoup,
            Dependencies.kotlinStdlib,
            Dependencies.kotlinReflect
    ).forEach { implementation(it) }

    listOf(
            Dependencies.androidxCoreTesing,
            Dependencies.androidxRoomTesing,
            Dependencies.googleTruth,
            Dependencies.googleTruthExtensions,
            Dependencies.junitJupiter
    ).forEach { testImplementation(it) }

    listOf(
//            Dependencies.androidxNavigationTesting,
//            Dependencies.androidxWorkTesting,
            Dependencies.androidxTestCore,
            Dependencies.androidxTestRunner,
            Dependencies.androidxTestExtJunit,
            Dependencies.androidxTestEspresso,
            Dependencies.googleTruth,
            Dependencies.junitJupiter
    ).forEach { androidTestImplementation(it) }

    api(Dependencies.kotlinCoroutines)

}
